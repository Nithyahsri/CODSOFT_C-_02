#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Function prototypes
void initializeBoard(vector<vector<char>>& board);
void displayBoard(const vector<vector<char>>& board);
bool placeMarker(vector<vector<char>>& board, int row, int col, char marker);
bool checkWin(const vector<vector<char>>& board, char marker);
bool checkDraw(const vector<vector<char>>& board);
bool isValidMove(const vector<vector<char>>& board, int row, int col);
void switchPlayer(char& currentPlayer);

int main() {
    vector<vector<char>> board(3, vector<char>(3, ' ')); // Initialize 3x3 board with empty spaces
    char currentPlayer = 'X'; // Player X starts first
    bool gameover = false;
    int row, col;

    cout << "Welcome to Tic-Tac-Toe!" << endl;

    while (!gameover) {
        // Display the board
        displayBoard(board);

        // Prompt the current player for their move
        cout << "Player " << currentPlayer << ", enter your move (row [1-3] column [1-3]): ";
        cin >> row >> col;

        // Adjust row and column to 0-based indexing
        row--;
        col--;

        // Check if the move is valid
        if (isValidMove(board, row, col)) {
            // Place the marker on the board
            if (!placeMarker(board, row, col, currentPlayer)) {
                cout << "Invalid move. That spot is already taken!" << endl;
                continue;
            }

            // Check for a win
            if (checkWin(board, currentPlayer)) {
                displayBoard(board);
                cout << "Player " << currentPlayer << " wins! Congratulations!" << endl;
                gameover = true;
            } else if (checkDraw(board)) {
                displayBoard(board);
                cout << "It's a draw!" << endl;
                gameover = true;
            } else {
                // Switch to the other player
                switchPlayer(currentPlayer);
            }
        } else {
            cout << "Invalid move. Please enter a valid row and column." << endl;
        }
    }

    cout << "Thank you for playing Tic-Tac-Toe!" << endl;

    return 0;
}

void initializeBoard(vector<vector<char>>& board) {
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            board[i][j] = ' ';
        }
    }
}

void displayBoard(const vector<vector<char>>& board) {
    cout << "-------------" << endl;
    for (int i = 0; i < 3; ++i) {
        cout << "| ";
        for (int j = 0; j < 3; ++j) {
            cout << board[i][j] << " | ";
        }
        cout << endl << "-------------" << endl;
    }
}

bool placeMarker(vector<vector<char>>& board, int row, int col, char marker) {
    if (board[row][col] == ' ') {
        board[row][col] = marker;
        return true;
    }
    return false;
}

bool checkWin(const vector<vector<char>>& board, char marker) {
    // Check rows and columns
    for (int i = 0; i < 3; ++i) {
        if (board[i][0] == marker && board[i][1] == marker && board[i][2] == marker)
            return true;
        if (board[0][i] == marker && board[1][i] == marker && board[2][i] == marker)
            return true;
    }
    // Check diagonals
    if (board[0][0] == marker && board[1][1] == marker && board[2][2] == marker)
        return true;
    if (board[0][2] == marker && board[1][1] == marker && board[2][0] == marker)
        return true;
    return false;
}

bool checkDraw(const vector<vector<char>>& board) {
    // Check if any cell is still empty
    for (const auto& row : board) {
        for (char cell : row) {
            if (cell == ' ')
                return false;
        }
    }
    // If no empty cells left and no winner, it's a draw
    return true;
}

bool isValidMove(const vector<vector<char>>& board, int row, int col) {
    // Check if the cell is within bounds and empty
    return (row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == ' ');
}

void switchPlayer(char& currentPlayer) {
    currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
}
